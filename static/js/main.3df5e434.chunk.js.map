{"version":3,"sources":["logo.svg","actions.js","Titles.js","Search.js","App.js","serviceWorker.js","reducers/articleReducer.js","store.js","index.js"],"names":["module","exports","__webpack_require__","p","REDUCE_ARTICLES","Component","reduceArticles","articles","type","Search","newsSearch","_callee","e","searchValue","req","_this2","this","regenerator_default","a","wrap","_context","prev","next","preventDefault","document","getElementsByName","value","toLowerCase","setState","Request","fetch","then","response","json","data","props","history","push","stop","_this3","react_default","createElement","className","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","onSubmit","placeholder","name","connect","state","dispatch","ownProps","withRouter","App","concat","process","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","newsLoad","asyncToGenerator","mark","src_Search","map","url","title","articleReducer","Boolean","window","location","hostname","match","arguments","length","undefined","action","store","combineReducers","createdStore","createStore","ReactDOM","render","react_router_dom","es","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3df5e434.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const REDUCE_ARTICLES = 'REDUCE_ARTICLES'\n\nexport function reduceArticles(articles){\n  return {type: REDUCE_ARTICLES, articles}\n}\n","import React, { Component } from 'react';\n\nclass Titles extends Component {\n\n  render() {\n    return (\n      <div>\n        {this.props.articles.map(function (e) { return <h2>{e.title}</h2> })}\n      </div>\n    );\n  }\n}\n\nexport default Titles;\n","import React, { Component } from 'react';\nimport {reduceArticles} from './actions';\nimport {connect} from 'react-redux';\nimport {NavLink, withRouter} from 'react-router-dom';\n\nclass Search extends Component {\n\n  newsSearch = async function(e){\n\n    e.preventDefault();\n    let searchValue = document.getElementsByName('search')[0].value.toLowerCase();\n    this.setState({searchValue: searchValue});\n\n    let url = 'https://newsapiwrapper.herokuapp.com/v1/search?q='+searchValue\n    let req = new Request(url);\n\n    fetch(req)\n        .then(response => response.json()\n          .then(data =>\n            this.props.reduceArticles(data.articles)\n        ))\n        this.props.history.push('/search/' + searchValue);\n  }\n\n  render() {\n      return (\n\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n      <a className=\"navbar-brand\" href=\"#\">News 4 yous</a>\n      <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n        <span className=\"navbar-toggler-icon\"></span>\n      </button>\n\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n      <form className=\"form-inline my-2 my-lg-0 ml-auto\" onSubmit={e => this.newsSearch(e)}>\n        <input className=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" name=\"search\"/>\n        <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\n      </form>\n    </div>\n  </nav>\n\n      );\n  }\n}\nconst mapStateToProps = (state) => {\n    return {\n     articles: state.reduceArticles\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        reduceArticles: (articles) =>{\n          dispatch(reduceArticles(articles))\n          }\n        }\n      }\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Search));\n","import React, { Component } from 'react';\nimport Titles from './Titles.js';\nimport Search from './Search.js'\nimport logo from './logo.svg';\nimport './App.css';\nimport {connect} from 'react-redux';\nimport {reduceArticles} from './actions'\n\n\nconst API_KEY = `${process.env.REACT_APP_API_KEY}`\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      articles: []\n    }\n  }\n\n  newsLoad = async function(){\n    let url = 'https://newsapiwrapper.herokuapp.com/v1/all'\n    var req = new Request(url);\n    fetch(req)\n        .then(response => response.json()\n          .then(data =>\n            this.props.reduceArticles(data.articles)\n        ))\n  }\n\n  componentWillMount(){\n    this.newsLoad()\n  }\n\n\n    render() {\n      return (\n        <div className=\"App\" id=\"root\">\n        <Search />\n        {this.props.articles.map(function (e) { return<a href={e.url}><h2>{e.title}</h2></a> })}\n        </div>\n      );\n    }\n  }\n\n\n  const mapStateToProps = (state) => {\n      return {\n       articles: state.articleReducer\n      }\n  }\n\n  const mapDispatchToProps = (dispatch, ownProps) => {\n      return {\n          reduceArticles: (articles) =>{\n            dispatch(reduceArticles(articles))\n            }\n          }\n        }\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { REDUCE_ARTICLES } from '../actions'\n\nfunction articleReducer(state = [], action){\n    switch(action.type){\n        case REDUCE_ARTICLES: {\n            return action.articles;\n          }\n          default: {\n            return state;\n          }\n        }\n      }\n\nexport default articleReducer;\n","import { combineReducers } from 'redux';\nimport articleReducer from './reducers/articleReducer'\n\nconst store = combineReducers({\n    articleReducer\n})\n\nexport default store\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport {BrowserRouter} from 'react-router-dom'\n\n\n\nconst createdStore = createStore(store);\nReactDOM.render(<BrowserRouter><Provider store={createdStore}><App /></Provider></BrowserRouter>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}